name: release
on:
    release:
        types: [created]
jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.release.target_commitish }}
            - name: Release
              id: release
              uses: ./.github/actions/release
            - name: Read node version
              id: nvm
              run: echo "::set-output name=version::$(cat .nvmrc)"
            - name: Set node version
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ steps.nvm.outputs.version }}
            - name: Cache yarn version
              id: yarn-cache
              uses: actions/cache@v2
              with:
                  path: '**/.yarn'
                  key: yarn-cache-v1-${{ hashFiles('**/.yvmrc') }}
            - name: Read yarn version
              id: yvm
              if: steps.yarn-cache.outputs.cache-hit != 'true'
              run: echo "::set-output name=version::$(cat .yvmrc)"
            - name: Set yarn version
              if: steps.yarn-cache.outputs.cache-hit != 'true'
              run: yarn policies set-version ${{ steps.yvm.outputs.version }}
            - name: Cache node_modules
              id: node-modules-cache
              uses: actions/cache@v2
              with:
                  path: '**/node_modules'
                  key: node-modules-cache-v1-${{ hashFiles('**/yarn.lock') }}
            - name: Install dependencies
              if: steps.node-modules-cache.outputs.cache-hit != 'true'
              run: yarn install --frozen-lockfile
            - name: OUTPUT
              env:
                  PUBLISH_COMMAND: ${{steps.release.outputs.publish_command}}
              run: |
                  echo "Publish command: $PUBLISH_COMMAND"
            # Run build step here, if needed.
            - name: Publish
              run: ${{ steps.release.outputs.command }}
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
